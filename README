THIS IS A PROGRAM TO EVALUATE DISPLACEMENTS ON A 2D BLOCK WITH FORCE BOUNDARY CONDITIONS ON THE ENDS USING PYLITH AND CUBIT

0. TO SETUP, GO TO "STARTUP.SH" IN THE MAIN DIRECTORY AND MODIFY THE PYLITH AND CUBIT DIRECTORIES APPROPRIATELY FOR YOUR MACHINE. FOR THE CUBIT DIRECTORY, SEND THE PROGRAM TO THE /BIN LOCATION.

1. TO RUN THE PROGRAM, CD INTO THE DIRECTORY AND RUN:

source Go.sh

INCIDENTALLY, Go.sh CONTAINS THE BUILDING BLOCKS OF THE CODE, AND CAN BE TAMPERED WITH AS NEEDED. 

2. FINAL RESULTS FOR DISPLACEMENTS ACROSS THE ENTIRE DOMAIN AND ON THE UPPER BOUNDARY ARE IN THE /OUTPUT FOLDER UNDER:

TWO TYPES OF FILES ARE IN THE OUTPUT: .VTK FILES AND .TXT FILES. .VTK FILES CAN BE DIRECTLY LOADED INTO PARAVIEW FOR VISUALIZATION. .TXT FILES CAN BY MANIPULATED USING PYTHON CODE. RESULTS FOR DISPLACEMENT ARE UNDER "DISPLACEMENT_PROFILE.TXT" AND RESULTS FOR THICKNESS ARE UNDER "THICKNESS_PROFILE.TXT". A PLOT SHOULD ALSO APPEAR AT THE END OF SIMULATIONS IF ALL WORKS WELL

3. TO MODIFY THE THICNKESS PROFILE, GO TO "MODIFY_THICKNESS.PY" AND MODIFY ACCORDINGLY.

4. TO MODIFY THE RHEOLOGY OF THE BLOCK, GO TO /SPATIALDB FOLDER AND MODIFY "MAT_LAYER.SPATIALDB"

5. TO MODIFY THE FORCE ACTING ON THE BLOCK, GO TO "MAKE_FORCEFILE.PY" AND CHANGE ACCORDINGLY. 

6. TO CHANGE THE BASE DIMENSIONS OF THE BLOCK (i.e. HEIGHT AND WIDTH), GO TO FILES "Make_geometry.jou" AND "Specify_Params.py" AND MODIFY ACCORDINGLY.

7. TO CHANGE THE SETTINGS FOR PYLITH (I RECOMMEND NOT DOING THIS IN GENREAL), GO TO PYLITHAPP.CFG AND MODIFY ACCORDINGLY.

(RLT): INSTRUCTIONS LISTED BELOW DESCRIBE FUNCTIONS FOR THE SPECIFIC USE CASE OF THE PROGRAM OF APPLYING INVERSE METHODS TO RECOVER THE THICKNESS OF A BLOCK BASED ON A STRAIN PROFILE.

8. TO GENERATE A GREEN'S FUNCTION MATRIX FOR A BASIS OF SPLINES, USE GREENS.SH AND GIVE INPUTS OF: NUMBER OF BASIS FUNCTIONS, DEGREE OF SPLINES (USE 1, 3 OR 5) AND AMPLITUDE OF PERTURBATION (RECOMMENDED 1). EDIT UNIFORM THICKNESS VALUE AS DESCRIBED IN 6. EXAMPLE:
(THIS WILL GENERATE THE GREEN'S FUNCTION MATRIX FOR 25 CUBIC SPLINES THAT SPAN THE LENGTH OF THE BLOCK, WHERE EACH COLUMN OF THE GREEN'S MATRIX IS GENERATED BY PERTURBING EACH SPLINE BY 1% OF THE BLOCK HEIGHT.)
source Greens.sh 25 3 1

9. TO RUN FORWARD MODEL AND APPLY INVERSION ONCE, USE INVERSION_TEST.SH. SPECIFY PARAMETERS OF BASIS AS ARGUMENTS, DESCRIBED IN FILE. SPECIFIED BASIS MUST HAVE GREEN'S FUNCTION MATRIX PREVIOUSLY GENERATED.

10. TO IMPLEMENT ITERATIVE INVERSE SOLVER, USE RUN_ITERATIVE.SH. AS WITH THE SINGLE INVERSION, SPECIFY PARAMETERS OF BASIS AS ARGUMENTS AS DESCRIBED IN FILE. SPECIFIED BASIS MUST HAVE GREEN'S FUNCTION MATRIX PREVIOUSLY GENERATED FOR THE FIRST CASE. To adjust number of iterations, adjust final number in for loop directly in file (line 10, where you have {1..x}).
- Currently trying to work through issues with having a starting thickness for the block (see 6.) that is different from the starting thickness that was used to generate the Green's function matrix.
- This doesn't affect the single inversion case, but it will mess up the iterative inversion because of the way that the recovered thickness profile is given as a series of coefficients (for the basis function) that, when fed back to the forward model to perturb each basis function from the recovered thickness, would require a starting thickness of the Green's function being used.
- Also haven't implemented automatic cutoff yet, need to run more trial cases to decide what the cutoff should be.